Author: Michael Webster <miketwebster@gmail.com>
Description: [PATCH] cinnamon-launcher: prevent defunct metacity process when
 restarting via the dialog, fix 'cinnamon --replace --replace' after crashes.

- Wait for metacity to terminate before re-exec'ing the launcher,
  otherwise it remains attached to the launcher as defunct. A
  new one is added after every dialog-based restart.
- restart_cinnamon() is only ever called by the 'parent' process,
  and we don't run 'cinnamon-launcher --replace' - replace is
  implied, and automatically added as an argument for launching
  'cinnamon'. We would end up with 'cinnamon --replace --replace'
  after a restart occurred. Just restart with the original
  arguments.
- Lock self.killed operations since they're operating on separate
  threads.

Origin: https://github.com/linuxmint/cinnamon/commit/de247a238e3309a9f088f6022fe934ff98069d87
---
 files/usr/bin/cinnamon-launcher | 38 +++++++++++++++++++++------------
 1 file changed, 24 insertions(+), 14 deletions(-)

diff --git a/files/usr/bin/cinnamon-launcher b/files/usr/bin/cinnamon-launcher
index 5fb4a56f4d..7882a3c5aa 100755
--- a/files/usr/bin/cinnamon-launcher
+++ b/files/usr/bin/cinnamon-launcher
@@ -49,6 +49,9 @@ def idle_function(func):
 class Launcher():
 
     def __init__(self):
+        self.fb_pid = 0
+        self.kill_lock = threading.Lock()
+
         self.cinnamon_pid = os.fork()
         if self.cinnamon_pid == 0:
             os.execvp("cinnamon", ("cinnamon", "--replace", ) + tuple(sys.argv[1:]))
@@ -70,18 +73,20 @@ class Launcher():
     def wait_for_process(self):
         exit_status = os.waitpid(self.cinnamon_pid, 0)[1]
         if exit_status != 0:
-            if self.killed:
-                # Restart Cinnamon
-                self.restart_cinnamon()
-            else:
-                if os.fork() == 0:
-                    # Start the fallback panel
-                    if panel_cmd is not None:
-                        os.system(panel_cmd)
-                    # Start the fallback window manager
-                    os.execvp(FALLBACK_COMMAND, (FALLBACK_COMMAND,) + FALLBACK_ARGS)
+            with self.kill_lock:
+                if self.killed:
+                    # Restart Cinnamon
+                    self.restart_cinnamon()
                 else:
-                    self.confirm_restart()
+                    self.fb_pid = os.fork()
+                    if self.fb_pid == 0:
+                        # Start the fallback panel
+                        if panel_cmd is not None:
+                            os.system(panel_cmd)
+                        # Start the fallback window manager
+                        os.execvp(FALLBACK_COMMAND, (FALLBACK_COMMAND,) + FALLBACK_ARGS)
+                    else:
+                        self.confirm_restart()
         else:
             Gtk.main_quit()
 
@@ -99,12 +104,13 @@ class Launcher():
                 if memory > limit:
                     print ("Memory threshold reached: %d" % memory)
                     self.log_kill(memory, limit, delay)
-                    self.killed = True
-                    process.kill()
+                    with self.kill_lock:
+                        self.killed = True
+                        process.kill()
                     break
 
     def restart_cinnamon(self):
-        os.execvp(sys.argv[0], (sys.argv[0], "--replace"))
+        os.execvp(sys.argv[0], sys.argv)
 
     def log_kill(self, memory, limit, delay):
         directory = os.path.expanduser("~/.cinnamon")
@@ -139,7 +145,11 @@ class Launcher():
             if checkbutton.get_active():
                 os.environ["CINNAMON_TROUBLESHOOT"] = "1"
             os.system("killall %s" % panel_process_name)
+            os.system("kill %d" % self.fb_pid)
+            os.waitpid(self.fb_pid, 0)
             self.restart_cinnamon()
+        else:
+            Gtk.main_quit()
 
 if __name__ == "__main__":
     setproctitle("cinnamon-launcher")
